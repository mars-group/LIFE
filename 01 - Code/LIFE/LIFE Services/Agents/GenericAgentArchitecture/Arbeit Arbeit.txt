Notizendatei und Ablage 
***********************

- Wahrnehmung soweit klar.
  - Com-Geschichte fehlt noch
  - Nachrichtendienst als TickClient? (wegen reset on tick)?

- Die ReasoningComponent scheint momentan recht sinnfrei zu sein ...

- Das Halo muß der Datenquelle übergeben werden.
  - Schnittstelle IHalo erstellen?

- Position in den Müll! Bewegungsklasse stattdessen einsetzen.
  (aber erst, wenn die Sensorik wieder geht!)


Alte Agentenerfassung (ehem. AgentSensor): 
Muß als Datenquelle in die Umwelt rein / später macht's die ESC. 

    /// <summary>
    ///   Combine total agent set and halo perception. 
    /// </summary>
    /// <returns>A generic list with agent distances and references.</returns>
    protected override SensorInput RetrieveData() {
      var gsi = new GenericSensorInput(this);
      foreach (var agent in _environment.GetAllAgents()) {
        if (Halo.IsInRange(agent.Position.Center) && 
            agent.Position.GetDistance(Halo.Position) >= float.Epsilon) {
          gsi.Values.Add(agent.Id, agent);
        }
      }
      return gsi;
    }



Tipp: Dateien löschen reduziert gelegentlich die Fehlerzahl enorm^^



// Nachrichten-Synchronisation

Agenten:
- Nachrichten werden in Phase III gesendet (als Teil einer Aktionsausführung)
- und in Phase I des nächsten Ticks empfangen (über Kommunikationssensor)

Nachrichten-Plattform (NP):
- hält die Nachrichten für einen Tick vor
  - muß automatisch zu alte Nachrichten löschen
    - unabhängig von Eingang und Abruf => selbständig
  - nimmt Nachrichten an und gibt aktuelle zurück

- zwei Pufferspeicher:
  - verfügbar (im letzten Tick empfangen)
  - eingegangen (werden im nächsten Tick verfügbar) 
  // in jedem neuen Tick wird geschoben, eingegangen = 0
  // Tick der NP muß vor der Agentenausführung erfolgen
  - Struktur: Zuordnung Kanalnummer => Nachrichtenliste
  // Dictionary<int,List<Message>> 

- Einfüge-, Abruf- und Rücksetzfunktion:
  void AddMessage(Message m) {
    if (!received.ContainsKey(m.Channel))
      received.Add(m.Channel, new List<Message>());
    received[m.Channel].Add(m); 
  }
  List<Message> GetMessages(int channel) {
    if (available.ContainsKey(channel))
      return available[channel];
    return new List<Message>(); 
  }
  void Tick() {
    available = received;
    received = new Dictionary<int, List<Message>>();
  }

- Nachrichtenklasse (Message):
  - Kanalnummer
  - Tick
  - Absenderagent
  - <Inhalt>
  // alles public get; private set;

// WIE WIRD DIE REFERENZ DEN AGENTEN VERFÜGBAR GEMACHT?
// Einzelstück => statisch machen?